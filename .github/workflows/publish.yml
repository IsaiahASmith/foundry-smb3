name: Publish

on:
  release:
    types:
      - created

jobs:
  build_editor:
    name: Build ${{ matrix.config.prefix }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        python-version: ["3.9.7"]
        config:
          - {
              os: ubuntu-20.04,
              exe: "foundry-smb3",
              prefix: "linux",
              suffix: "",
              architecture: "x64",
            }
          - {
              os: windows-2019,
              exe: "foundry-smb3.exe",
              prefix: "win64",
              suffix: ".exe",
              architecture: "x64",
            }
          - {
              os: windows-2019,
              exe: "foundry-smb3.exe",
              prefix: "win32",
              suffix: ".exe",
              architecture: "x86",
            }
          - {
              os: macos-latest,
              exe: "foundry-smb3",
              prefix: "osx",
              suffix: "",
              architecture: "x64",
            }

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.config.architecture }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Load cached venv if it exists
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies if cache does not exist
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # Install root project
      - name: Install library
        run: poetry install --no-interaction

      - name: Build Executable
        run: |
          poetry run pyinstaller foundry-smb3.spec
          mv dist/${{ matrix.config.exe }} dist/${{ matrix.config.prefix }}-foundry-smb3${{ matrix.config.suffix }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.prefix }}-foundry-smb3${{ matrix.config.suffix }}
          path: dist/${{ matrix.config.prefix }}-foundry-smb3${{ matrix.config.suffix }}

  build_manual:
    name: Build Manual
    runs-on: ubuntu-20.04
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Setup node/npm
        uses: actions/setup-node@v2

      - name: Get Dependencies
        run: |
          npm install markdown-pdf
          wget https://github.com/sindresorhus/github-markdown-css/blob/gh-pages/github-markdown.css
      - name: Build PDF
        run: node_modules/.bin/markdown-pdf --css-path github-markdwon.css MANUAL.md

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: MANUAL.pdf
          path: MANUAL.pdf

  # We're forced to create a separate publish job since the create-release
  # action fails if it is run twice on the same tag. But we have multiple
  # build systems (Windows, Linux, OSX) and only want one release.
  publish:
    needs: [build_editor, build_manual]
    name: "Publish"
    runs-on: ubuntu-latest # this doesn't matter as it's only codestyle and artifact collection
    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download All Artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./artifacts/

      # upload-release-asset doesn't accept a directory or an array
      # of files, so we must individually upload each one
      - name: Upload SMB3 Foundry Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "artifacts/linux-foundry-smb3/linux-foundry-smb3"
          asset_name: "linux-foundry-smb3"
          asset_content_type: application/octet-stream

      - name: Upload SMB3 Foundry OSX
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "artifacts/osx-foundry-smb3/osx-foundry-smb3"
          asset_name: "osx-foundry-smb3"
          asset_content_type: application/octet-stream

      - name: Upload SMB3 Foundry Windows x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "artifacts/win64-foundry-smb3.exe/win64-foundry-smb3.exe"
          asset_name: "win64-foundry-smb3.exe"
          asset_content_type: application/octet-stream

      - name: Upload SMB3 Foundry Windows x32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "artifacts/win32-foundry-smb3.exe/win32-foundry-smb3.exe"
          asset_name: "win32-foundry-smb3.exe"
          asset_content_type: application/octet-stream

      - name: Upload SMB3 Foundry Manual
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "artifacts/MANUAL.pdf/MANUAL.pdf"
          asset_name: "MANUAL.pdf"
          asset_content_type: application/pdf
